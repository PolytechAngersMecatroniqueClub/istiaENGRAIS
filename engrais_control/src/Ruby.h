//********************************************************************************************************
#ifndef RUBY_H
#define RUBY_H

#include <iostream>
#include <vector>
#include <algorithm>
#include <sensor_msgs/LaserScan.h>

#include "Point.h"
#include "Utility.h"
#include "Model.h"
#include "Pearl.h"

class Ruby : public Pearl{
	public:
		int nOfPositivePoints = 0;
		int nOfNegativePoints = 0;

	public:
		//------------------------------------------------------------------------------------------------
		Ruby();
		//------------------------------------------------------------------------------------------------
		void populateOutliers(const sensor_msgs::LaserScan & );
		//------------------------------------------------------------------------------------------------
		std::pair<Model, Model> findLines();

	public:
		//################################################################################################

		//------------------------------------------------------------------------------------------------
		std::vector<Point> randomPointsInField(const int , const int = 0, const int = 0);
		//------------------------------------------------------------------------------------------------
		void searchModels(const int );

		//################################################################################################

		//------------------------------------------------------------------------------------------------
		double calculateEnergy();
		//------------------------------------------------------------------------------------------------
		double meanNumbOfPoints();

		//################################################################################################
		
		//------------------------------------------------------------------------------------------------
		std::vector<int> countParallelLines();
		//------------------------------------------------------------------------------------------------
		std::pair<Model, Model> eraseBadModels();

		//################################################################################################
		
		friend std::ostream & operator << (std::ostream &out, const Ruby &r);
};

inline Ruby::Ruby(){}

#endif
//********************************************************************************************************